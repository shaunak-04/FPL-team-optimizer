{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3d1b571b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import joblib\n",
    "from pulp import LpProblem, LpVariable, lpSum, LpMaximize, LpBinary\n",
    "import numpy as np\n",
    "import plotly.graph_objects as go\n",
    "import plotly.express as px\n",
    "from datetime import datetime\n",
    "\n",
    "# Set page config\n",
    "st.set_page_config(\n",
    "    page_title=\"FPL Team Predictor\",\n",
    "    page_icon=\"⚽\",\n",
    "    layout=\"wide\",\n",
    "    initial_sidebar_state=\"expanded\"\n",
    ")\n",
    "\n",
    "# Custom CSS for FPL styling\n",
    "st.markdown(\"\"\"\n",
    "<style>\n",
    "    .main-header {\n",
    "        background: linear-gradient(135deg, #00FF87 0%, #60EFFF 100%);\n",
    "        padding: 2rem;\n",
    "        border-radius: 10px;\n",
    "        margin-bottom: 2rem;\n",
    "        text-align: center;\n",
    "        color: #2D0A31;\n",
    "    }\n",
    "    \n",
    "    .player-card {\n",
    "        background: linear-gradient(135deg, #37003C 0%, #00FF87 100%);\n",
    "        color: white;\n",
    "        padding: 1rem;\n",
    "        border-radius: 10px;\n",
    "        margin: 0.5rem;\n",
    "        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n",
    "        transition: transform 0.3s ease;\n",
    "    }\n",
    "    \n",
    "    .player-card:hover {\n",
    "        transform: translateY(-5px);\n",
    "    }\n",
    "    \n",
    "    .captain-badge {\n",
    "        background: #FFD700;\n",
    "        color: #37003C;\n",
    "        padding: 0.2rem 0.5rem;\n",
    "        border-radius: 20px;\n",
    "        font-size: 0.8rem;\n",
    "        font-weight: bold;\n",
    "    }\n",
    "    \n",
    "    .vice-badge {\n",
    "        background: #C0C0C0;\n",
    "        color: #37003C;\n",
    "        padding: 0.2rem 0.5rem;\n",
    "        border-radius: 20px;\n",
    "        font-size: 0.8rem;\n",
    "        font-weight: bold;\n",
    "    }\n",
    "    \n",
    "    .formation-display {\n",
    "        background: linear-gradient(135deg, #37003C 0%, #00FF87 100%);\n",
    "        padding: 2rem;\n",
    "        border-radius: 15px;\n",
    "        margin: 1rem 0;\n",
    "        min-height: 600px;\n",
    "        position: relative;\n",
    "    }\n",
    "    \n",
    "    .pitch-lines {\n",
    "        position: absolute;\n",
    "        top: 0;\n",
    "        left: 0;\n",
    "        right: 0;\n",
    "        bottom: 0;\n",
    "        background-image: \n",
    "            linear-gradient(to right, rgba(255,255,255,0.1) 1px, transparent 1px),\n",
    "            linear-gradient(to bottom, rgba(255,255,255,0.1) 1px, transparent 1px);\n",
    "        background-size: 50px 50px;\n",
    "        border-radius: 15px;\n",
    "    }\n",
    "    \n",
    "    .stats-card {\n",
    "        background: linear-gradient(135deg, #37003C 0%, #00FF87 100%);\n",
    "        color: white;\n",
    "        padding: 1.5rem;\n",
    "        border-radius: 10px;\n",
    "        text-align: center;\n",
    "        margin: 0.5rem;\n",
    "    }\n",
    "    \n",
    "    .bench-area {\n",
    "        background: linear-gradient(135deg, #1E1E1E 0%, #37003C 100%);\n",
    "        padding: 1rem;\n",
    "        border-radius: 10px;\n",
    "        margin: 1rem 0;\n",
    "    }\n",
    "    \n",
    "    .metric-container {\n",
    "        display: flex;\n",
    "        justify-content: space-around;\n",
    "        margin: 1rem 0;\n",
    "    }\n",
    "</style>\n",
    "\"\"\", unsafe_allow_html=True)\n",
    "\n",
    "# Load models and data (with error handling)\n",
    "@st.cache_resource\n",
    "def load_models():\n",
    "    \"\"\"Load ML models\"\"\"\n",
    "    try:\n",
    "        models = {\n",
    "            'gk': joblib.load(\"gk_model.pkl\"),\n",
    "            'def': joblib.load(\"def_model.pkl\"),\n",
    "            'mid': joblib.load(\"mid_model.pkl\"),\n",
    "            'fwd': joblib.load(\"fwd_model.pkl\")\n",
    "        }\n",
    "        return models\n",
    "    except FileNotFoundError:\n",
    "        st.error(\"❌ Model files not found. Please ensure all .pkl files are in the same directory.\")\n",
    "        return None\n",
    "\n",
    "@st.cache_data\n",
    "def load_data():\n",
    "    \"\"\"Load FPL data\"\"\"\n",
    "    try:\n",
    "        data = {\n",
    "            'gk': pd.read_csv(\"fpl_gk_data.csv\"),\n",
    "            'def': pd.read_csv(\"fpl_def_data.csv\"),\n",
    "            'mid': pd.read_csv(\"fpl_mid_data.csv\"),\n",
    "            'fwd': pd.read_csv(\"fpl_fwd_data.csv\")\n",
    "        }\n",
    "        return data\n",
    "    except FileNotFoundError:\n",
    "        st.error(\"❌ Data files not found. Please ensure all CSV files are in the same directory.\")\n",
    "        return None\n",
    "\n",
    "def predict_for_gameweek(data, models, season, gameweek):\n",
    "    \"\"\"Predict player points for NEXT gameweek\"\"\"\n",
    "    def prepare(df, model):\n",
    "        current_gw_data = df[(df['season'] == season) & (df['gameweek'] == gameweek)].copy()\n",
    "        \n",
    "        if current_gw_data.empty:\n",
    "            return pd.DataFrame(columns=['name', 'team', 'value', 'predicted_next_points', 'actual_next_points'])\n",
    "        \n",
    "        ids = current_gw_data[['name', 'team', 'value']].copy()\n",
    "        \n",
    "        if 'future_points' in current_gw_data.columns:\n",
    "            ids['actual_next_points'] = current_gw_data['future_points']\n",
    "        \n",
    "        train_columns = [col for col in model.feature_names_in_ if col != 'future_points']\n",
    "        missing_cols = set(train_columns) - set(current_gw_data.columns)\n",
    "        \n",
    "        if missing_cols:\n",
    "            return pd.DataFrame(columns=['name', 'team', 'value', 'predicted_next_points', 'actual_next_points'])\n",
    "        \n",
    "        X = current_gw_data[train_columns].fillna(0)\n",
    "        preds = model.predict(X)\n",
    "        \n",
    "        result = ids.copy()\n",
    "        result['predicted_next_points'] = preds\n",
    "        result['value'] = result['value'] / 10\n",
    "        \n",
    "        result['predicted_next_points'] = pd.to_numeric(result['predicted_next_points'], errors='coerce').fillna(0)\n",
    "        result['value'] = pd.to_numeric(result['value'], errors='coerce').fillna(4.0)\n",
    "        \n",
    "        if 'actual_next_points' in result.columns:\n",
    "            result['actual_next_points'] = pd.to_numeric(result['actual_next_points'], errors='coerce').fillna(0)\n",
    "        \n",
    "        result = result[np.isfinite(result['predicted_next_points']) & np.isfinite(result['value'])]\n",
    "        return result.reset_index(drop=True)\n",
    "    \n",
    "    return (prepare(data['gk'], models['gk']), \n",
    "            prepare(data['def'], models['def']), \n",
    "            prepare(data['mid'], models['mid']), \n",
    "            prepare(data['fwd'], models['fwd']))\n",
    "\n",
    "def optimize_fpl_team(gk, defs, mids, fwds, budget=100.0, formation='3-5-2'):\n",
    "    \"\"\"Optimize FPL team selection\"\"\"\n",
    "    if any(df.empty for df in [gk, defs, mids, fwds]):\n",
    "        return pd.DataFrame(), None, None\n",
    "    \n",
    "    all_players = pd.concat([\n",
    "        gk.assign(position='GK'), defs.assign(position='DEF'),\n",
    "        mids.assign(position='MID'), fwds.assign(position='FWD')\n",
    "    ], ignore_index=True)\n",
    "    \n",
    "    def_start, mid_start, fwd_start = map(int, formation.split('-'))\n",
    "    \n",
    "    prob = LpProblem(\"FPL_Squad_Optimization\", LpMaximize)\n",
    "    n_players = len(all_players)\n",
    "    \n",
    "    squad_vars = [LpVariable(f\"squad_{i}\", cat=LpBinary) for i in range(n_players)]\n",
    "    start_vars = [LpVariable(f\"start_{i}\", cat=LpBinary) for i in range(n_players)]\n",
    "    captain_vars = [LpVariable(f\"captain_{i}\", cat=LpBinary) for i in range(n_players)]\n",
    "    vice_vars = [LpVariable(f\"vice_{i}\", cat=LpBinary) for i in range(n_players)]\n",
    "    \n",
    "    prob += lpSum([\n",
    "        start_vars[i] * float(all_players.iloc[i]['predicted_next_points']) +\n",
    "        captain_vars[i] * float(all_players.iloc[i]['predicted_next_points'])\n",
    "        for i in range(n_players)\n",
    "    ])\n",
    "    \n",
    "    # Constraints\n",
    "    prob += lpSum([squad_vars[i] * float(all_players.iloc[i]['value']) for i in range(n_players)]) <= budget\n",
    "    prob += lpSum(squad_vars) == 15\n",
    "    prob += lpSum(start_vars) == 11\n",
    "    prob += lpSum(captain_vars) == 1\n",
    "    prob += lpSum(vice_vars) == 1\n",
    "    \n",
    "    for i in range(n_players):\n",
    "        prob += start_vars[i] <= squad_vars[i]\n",
    "        prob += captain_vars[i] <= start_vars[i]\n",
    "        prob += vice_vars[i] <= start_vars[i]\n",
    "        prob += captain_vars[i] + vice_vars[i] <= 1\n",
    "    \n",
    "    # Position constraints\n",
    "    gk_indices = [i for i in range(n_players) if all_players.iloc[i]['position'] == 'GK']\n",
    "    def_indices = [i for i in range(n_players) if all_players.iloc[i]['position'] == 'DEF']\n",
    "    mid_indices = [i for i in range(n_players) if all_players.iloc[i]['position'] == 'MID']\n",
    "    fwd_indices = [i for i in range(n_players) if all_players.iloc[i]['position'] == 'FWD']\n",
    "    \n",
    "    prob += lpSum([squad_vars[i] for i in gk_indices]) == 2\n",
    "    prob += lpSum([squad_vars[i] for i in def_indices]) == 5\n",
    "    prob += lpSum([squad_vars[i] for i in mid_indices]) == 5\n",
    "    prob += lpSum([squad_vars[i] for i in fwd_indices]) == 3\n",
    "    \n",
    "    prob += lpSum([start_vars[i] for i in gk_indices]) == 1\n",
    "    prob += lpSum([start_vars[i] for i in def_indices]) == def_start\n",
    "    prob += lpSum([start_vars[i] for i in mid_indices]) == mid_start\n",
    "    prob += lpSum([start_vars[i] for i in fwd_indices]) == fwd_start\n",
    "    \n",
    "    # Max 3 players per team\n",
    "    for team in all_players['team'].unique():\n",
    "        team_indices = [i for i in range(n_players) if all_players.iloc[i]['team'] == team]\n",
    "        prob += lpSum([squad_vars[i] for i in team_indices]) <= 3\n",
    "    \n",
    "    prob.solve()\n",
    "    \n",
    "    if prob.status != 1:\n",
    "        return pd.DataFrame(), None, None\n",
    "    \n",
    "    # Extract results\n",
    "    squad_indices = [i for i in range(n_players) if squad_vars[i].value() == 1]\n",
    "    start_indices = [i for i in range(n_players) if start_vars[i].value() == 1]\n",
    "    captain_index = [i for i in range(n_players) if captain_vars[i].value() == 1][0]\n",
    "    vice_index = [i for i in range(n_players) if vice_vars[i].value() == 1][0]\n",
    "    \n",
    "    squad_df = all_players.iloc[squad_indices].copy()\n",
    "    squad_df['in_starting_xi'] = squad_df.index.isin(start_indices)\n",
    "    squad_df['is_captain'] = squad_df.index == captain_index\n",
    "    squad_df['is_vice_captain'] = squad_df.index == vice_index\n",
    "    \n",
    "    squad_df['effective_predicted_points'] = squad_df['predicted_next_points'].copy()\n",
    "    squad_df.loc[squad_df['is_captain'], 'effective_predicted_points'] *= 2\n",
    "    \n",
    "    squad_df = squad_df.sort_values(['in_starting_xi', 'position', 'predicted_next_points'], \n",
    "                                   ascending=[False, True, False]).reset_index(drop=True)\n",
    "    \n",
    "    return squad_df, all_players.iloc[captain_index], all_players.iloc[vice_index]\n",
    "\n",
    "def create_formation_visualization(squad_df, formation):\n",
    "    \"\"\"Create interactive formation visualization\"\"\"\n",
    "    if squad_df.empty:\n",
    "        return None\n",
    "    \n",
    "    starting_xi = squad_df[squad_df['in_starting_xi']].copy()\n",
    "    \n",
    "    # Formation positions\n",
    "    formation_positions = {\n",
    "        '3-5-2': {\n",
    "            'GK': [(0.5, 0.1)],\n",
    "            'DEF': [(0.2, 0.3), (0.5, 0.3), (0.8, 0.3)],\n",
    "            'MID': [(0.1, 0.55), (0.35, 0.55), (0.5, 0.65), (0.65, 0.55), (0.9, 0.55)],\n",
    "            'FWD': [(0.35, 0.85), (0.65, 0.85)]\n",
    "        },\n",
    "        '3-4-3': {\n",
    "            'GK': [(0.5, 0.1)],\n",
    "            'DEF': [(0.2, 0.3), (0.5, 0.3), (0.8, 0.3)],\n",
    "            'MID': [(0.25, 0.55), (0.45, 0.55), (0.55, 0.55), (0.75, 0.55)],\n",
    "            'FWD': [(0.2, 0.85), (0.5, 0.85), (0.8, 0.85)]\n",
    "        },\n",
    "        '4-5-1': {\n",
    "            'GK': [(0.5, 0.1)],\n",
    "            'DEF': [(0.15, 0.3), (0.38, 0.3), (0.62, 0.3), (0.85, 0.3)],\n",
    "            'MID': [(0.1, 0.55), (0.3, 0.55), (0.5, 0.65), (0.7, 0.55), (0.9, 0.55)],\n",
    "            'FWD': [(0.5, 0.85)]\n",
    "        },\n",
    "        '4-4-2': {\n",
    "            'GK': [(0.5, 0.1)],\n",
    "            'DEF': [(0.15, 0.3), (0.38, 0.3), (0.62, 0.3), (0.85, 0.3)],\n",
    "            'MID': [(0.2, 0.55), (0.45, 0.55), (0.55, 0.55), (0.8, 0.55)],\n",
    "            'FWD': [(0.35, 0.85), (0.65, 0.85)]\n",
    "        }\n",
    "    }\n",
    "    \n",
    "    positions = formation_positions.get(formation, formation_positions['3-5-2'])\n",
    "    \n",
    "    fig = go.Figure()\n",
    "    \n",
    "    # Add pitch background\n",
    "    fig.add_shape(\n",
    "        type=\"rect\",\n",
    "        x0=0, y0=0, x1=1, y1=1,\n",
    "        fillcolor=\"rgba(0, 255, 135, 0.1)\",\n",
    "        line=dict(color=\"rgba(255, 255, 255, 0.3)\", width=2)\n",
    "    )\n",
    "    \n",
    "    # Add players\n",
    "    for pos in ['GK', 'DEF', 'MID', 'FWD']:\n",
    "        pos_players = starting_xi[starting_xi['position'] == pos]\n",
    "        pos_positions = positions[pos]\n",
    "        \n",
    "        for i, (_, player) in enumerate(pos_players.iterrows()):\n",
    "            if i < len(pos_positions):\n",
    "                x, y = pos_positions[i]\n",
    "                \n",
    "                # Player circle\n",
    "                color = \"#FFD700\" if player['is_captain'] else \"#C0C0C0\" if player['is_vice_captain'] else \"#00FF87\"\n",
    "                \n",
    "                fig.add_trace(go.Scatter(\n",
    "                    x=[x], y=[y],\n",
    "                    mode='markers+text',\n",
    "                    marker=dict(\n",
    "                        size=40,\n",
    "                        color=color,\n",
    "                        line=dict(color='white', width=2)\n",
    "                    ),\n",
    "                    text=player['name'].split()[0],\n",
    "                    textposition=\"middle center\",\n",
    "                    textfont=dict(color='#37003C', size=10, family=\"Arial Black\"),\n",
    "                    hovertemplate=f\"<b>{player['name']}</b><br>\" +\n",
    "                                f\"Team: {player['team']}<br>\" +\n",
    "                                f\"Value: £{player['value']:.1f}m<br>\" +\n",
    "                                f\"Predicted: {player['predicted_next_points']:.1f} pts<br>\" +\n",
    "                                f\"{'(C)' if player['is_captain'] else '(VC)' if player['is_vice_captain'] else ''}<extra></extra>\",\n",
    "                    showlegend=False\n",
    "                ))\n",
    "    \n",
    "    fig.update_layout(\n",
    "        title=\"Formation View\",\n",
    "        xaxis=dict(showgrid=False, zeroline=False, showticklabels=False, range=[0, 1]),\n",
    "        yaxis=dict(showgrid=False, zeroline=False, showticklabels=False, range=[0, 1]),\n",
    "        plot_bgcolor='rgba(0,0,0,0)',\n",
    "        paper_bgcolor='rgba(0,0,0,0)',\n",
    "        height=600,\n",
    "        margin=dict(l=0, r=0, t=50, b=0)\n",
    "    )\n",
    "    \n",
    "    return fig\n",
    "\n",
    "def display_player_card(player, is_starting=True):\n",
    "    \"\"\"Display a player card\"\"\"\n",
    "    badge = \"\"\n",
    "    if player['is_captain']:\n",
    "        badge = '<span class=\"captain-badge\">C</span>'\n",
    "    elif player['is_vice_captain']:\n",
    "        badge = '<span class=\"vice-badge\">VC</span>'\n",
    "    \n",
    "    card_html = f\"\"\"\n",
    "    <div class=\"player-card\">\n",
    "        <div style=\"display: flex; justify-content: space-between; align-items: center;\">\n",
    "            <div>\n",
    "                <h4 style=\"margin: 0; color: #00FF87;\">{player['name']} {badge}</h4>\n",
    "                <p style=\"margin: 0; opacity: 0.8;\">{player['team']} | {player['position']}</p>\n",
    "            </div>\n",
    "            <div style=\"text-align: right;\">\n",
    "                <h3 style=\"margin: 0; color: #FFD700;\">£{player['value']:.1f}m</h3>\n",
    "                <p style=\"margin: 0; color: #00FF87;\">{player['predicted_next_points']:.1f} pts</p>\n",
    "            </div>\n",
    "        </div>\n",
    "    </div>\n",
    "    \"\"\"\n",
    "    return card_html\n",
    "\n",
    "def create_stats_visualization(squad_df):\n",
    "    \"\"\"Create stats visualization\"\"\"\n",
    "    if squad_df.empty:\n",
    "        return None, None\n",
    "    \n",
    "    # Position distribution\n",
    "    pos_counts = squad_df['position'].value_counts()\n",
    "    fig_pos = px.pie(\n",
    "        values=pos_counts.values,\n",
    "        names=pos_counts.index,\n",
    "        title=\"Squad Composition\",\n",
    "        color_discrete_map={\n",
    "            'GK': '#FF6B6B',\n",
    "            'DEF': '#4ECDC4',\n",
    "            'MID': '#45B7D1',\n",
    "            'FWD': '#96CEB4'\n",
    "        }\n",
    "    )\n",
    "    fig_pos.update_traces(textposition='inside', textinfo='percent+label')\n",
    "    fig_pos.update_layout(\n",
    "        plot_bgcolor='rgba(0,0,0,0)',\n",
    "        paper_bgcolor='rgba(0,0,0,0)',\n",
    "        font=dict(color='white')\n",
    "    )\n",
    "    \n",
    "    # Team distribution\n",
    "    team_counts = squad_df['team'].value_counts().head(10)\n",
    "    fig_team = px.bar(\n",
    "        x=team_counts.index,\n",
    "        y=team_counts.values,\n",
    "        title=\"Players by Team\",\n",
    "        color=team_counts.values,\n",
    "        color_continuous_scale='Viridis'\n",
    "    )\n",
    "    fig_team.update_layout(\n",
    "        plot_bgcolor='rgba(0,0,0,0)',\n",
    "        paper_bgcolor='rgba(0,0,0,0)',\n",
    "        font=dict(color='white'),\n",
    "        xaxis=dict(title=\"Team\"),\n",
    "        yaxis=dict(title=\"Number of Players\")\n",
    "    )\n",
    "    \n",
    "    return fig_pos, fig_team\n",
    "\n",
    "def main():\n",
    "    # Header\n",
    "    st.markdown(\"\"\"\n",
    "    <div class=\"main-header\">\n",
    "        <h1>⚽ FPL Team Predictor</h1>\n",
    "        <p>AI-Powered Fantasy Premier League Team Selection</p>\n",
    "    </div>\n",
    "    \"\"\", unsafe_allow_html=True)\n",
    "    \n",
    "    # Load data and models\n",
    "    models = load_models()\n",
    "    data = load_data()\n",
    "    \n",
    "    if models is None or data is None:\n",
    "        st.stop()\n",
    "    \n",
    "    # Sidebar controls\n",
    "    st.sidebar.header(\"🎮 Team Configuration\")\n",
    "    \n",
    "    season = st.sidebar.selectbox(\n",
    "        \"Season\",\n",
    "        options=[\"2024-25\", \"2023-24\"],\n",
    "        index=0\n",
    "    )\n",
    "    \n",
    "    current_gameweek = st.sidebar.slider(\n",
    "        \"Current Gameweek\",\n",
    "        min_value=1,\n",
    "        max_value=38,\n",
    "        value=7,\n",
    "        help=\"Gameweek to use for predictions\"\n",
    "    )\n",
    "    \n",
    "    target_gameweek = st.sidebar.slider(\n",
    "        \"Target Gameweek\",\n",
    "        min_value=current_gameweek + 1,\n",
    "        max_value=38,\n",
    "        value=current_gameweek + 1,\n",
    "        help=\"Gameweek to predict for\"\n",
    "    )\n",
    "    \n",
    "    budget = st.sidebar.slider(\n",
    "        \"Budget (£m)\",\n",
    "        min_value=80.0,\n",
    "        max_value=120.0,\n",
    "        value=100.0,\n",
    "        step=0.5,\n",
    "        help=\"Team budget in millions\"\n",
    "    )\n",
    "    \n",
    "    formation = st.sidebar.selectbox(\n",
    "        \"Formation\",\n",
    "        options=[\"3-5-2\", \"3-4-3\", \"4-5-1\", \"4-4-2\"],\n",
    "        index=0,\n",
    "        help=\"Team formation\"\n",
    "    )\n",
    "    \n",
    "    # Generate team button\n",
    "    if st.sidebar.button(\"🚀 Generate Optimal Team\", type=\"primary\"):\n",
    "        with st.spinner(\"🔮 Predicting optimal team...\"):\n",
    "            # Get predictions\n",
    "            gk_p, def_p, mid_p, fwd_p = predict_for_gameweek(\n",
    "                data, models, season, current_gameweek\n",
    "            )\n",
    "            \n",
    "            # Optimize team\n",
    "            squad_df, captain, vice = optimize_fpl_team(\n",
    "                gk_p, def_p, mid_p, fwd_p, budget, formation\n",
    "            )\n",
    "            \n",
    "            # Store in session state\n",
    "            st.session_state.squad_df = squad_df\n",
    "            st.session_state.captain = captain\n",
    "            st.session_state.vice = vice\n",
    "            st.session_state.formation = formation\n",
    "    \n",
    "    # Display results\n",
    "    if hasattr(st.session_state, 'squad_df') and not st.session_state.squad_df.empty:\n",
    "        squad_df = st.session_state.squad_df\n",
    "        captain = st.session_state.captain\n",
    "        vice = st.session_state.vice\n",
    "        formation = st.session_state.formation\n",
    "        \n",
    "        # Main metrics\n",
    "        col1, col2, col3, col4 = st.columns(4)\n",
    "        \n",
    "        with col1:\n",
    "            st.markdown(f\"\"\"\n",
    "            <div class=\"stats-card\">\n",
    "                <h3>💰 Total Cost</h3>\n",
    "                <h2>£{squad_df['value'].sum():.1f}m</h2>\n",
    "            </div>\n",
    "            \"\"\", unsafe_allow_html=True)\n",
    "        \n",
    "        with col2:\n",
    "            predicted_points = squad_df[squad_df['in_starting_xi']]['effective_predicted_points'].sum()\n",
    "            st.markdown(f\"\"\"\n",
    "            <div class=\"stats-card\">\n",
    "                <h3>🔮 Predicted Points</h3>\n",
    "                <h2>{predicted_points:.1f}</h2>\n",
    "            </div>\n",
    "            \"\"\", unsafe_allow_html=True)\n",
    "        \n",
    "        with col3:\n",
    "            st.markdown(f\"\"\"\n",
    "            <div class=\"stats-card\">\n",
    "                <h3>👑 Captain</h3>\n",
    "                <h2>{captain['name']}</h2>\n",
    "            </div>\n",
    "            \"\"\", unsafe_allow_html=True)\n",
    "        \n",
    "        with col4:\n",
    "            st.markdown(f\"\"\"\n",
    "            <div class=\"stats-card\">\n",
    "                <h3>🥈 Vice Captain</h3>\n",
    "                <h2>{vice['name']}</h2>\n",
    "            </div>\n",
    "            \"\"\", unsafe_allow_html=True)\n",
    "        \n",
    "        # Formation visualization\n",
    "        st.subheader(\"🏟️ Formation View\")\n",
    "        formation_fig = create_formation_visualization(squad_df, formation)\n",
    "        if formation_fig:\n",
    "            st.plotly_chart(formation_fig, use_container_width=True)\n",
    "        \n",
    "        # Team details\n",
    "        col1, col2 = st.columns([2, 1])\n",
    "        \n",
    "        with col1:\n",
    "            st.subheader(\"📋 Starting XI\")\n",
    "            starting_xi = squad_df[squad_df['in_starting_xi']]\n",
    "            \n",
    "            for pos in ['GK', 'DEF', 'MID', 'FWD']:\n",
    "                pos_players = starting_xi[starting_xi['position'] == pos]\n",
    "                if not pos_players.empty:\n",
    "                    st.markdown(f\"**{pos}:**\")\n",
    "                    for _, player in pos_players.iterrows():\n",
    "                        st.markdown(display_player_card(player), unsafe_allow_html=True)\n",
    "        \n",
    "        with col2:\n",
    "            st.subheader(\"🪑 Bench\")\n",
    "            bench = squad_df[~squad_df['in_starting_xi']]\n",
    "            \n",
    "            for _, player in bench.iterrows():\n",
    "                st.markdown(display_player_card(player, is_starting=False), unsafe_allow_html=True)\n",
    "        \n",
    "        # Analytics\n",
    "        st.subheader(\"📊 Team Analytics\")\n",
    "        \n",
    "        col1, col2 = st.columns(2)\n",
    "        \n",
    "        with col1:\n",
    "            fig_pos, fig_team = create_stats_visualization(squad_df)\n",
    "            if fig_pos:\n",
    "                st.plotly_chart(fig_pos, use_container_width=True)\n",
    "        \n",
    "        with col2:\n",
    "            if fig_team:\n",
    "                st.plotly_chart(fig_team, use_container_width=True)\n",
    "        \n",
    "        # Detailed table\n",
    "        st.subheader(\"📋 Detailed Squad List\")\n",
    "        \n",
    "        # Format display table\n",
    "        display_df = squad_df.copy()\n",
    "        display_df['Status'] = display_df.apply(\n",
    "            lambda x: 'Captain' if x['is_captain'] else 'Vice' if x['is_vice_captain'] else 'Starting' if x['in_starting_xi'] else 'Bench',\n",
    "            axis=1\n",
    "        )\n",
    "        \n",
    "        display_cols = ['name', 'team', 'position', 'value', 'predicted_next_points', 'Status']\n",
    "        display_df = display_df[display_cols]\n",
    "        display_df.columns = ['Player', 'Team', 'Position', 'Value (£m)', 'Predicted Points', 'Status']\n",
    "        \n",
    "        st.dataframe(\n",
    "            display_df,\n",
    "            use_container_width=True,\n",
    "            hide_index=True\n",
    "        )\n",
    "        \n",
    "        # Export functionality\n",
    "        st.subheader(\"💾 Export Team\")\n",
    "        \n",
    "        col1, col2 = st.columns(2)\n",
    "        \n",
    "        with col1:\n",
    "            if st.button(\"📥 Download as CSV\"):\n",
    "                csv = squad_df.to_csv(index=False)\n",
    "                st.download_button(\n",
    "                    label=\"Download CSV\",\n",
    "                    data=csv,\n",
    "                    file_name=f\"fpl_team_gw{target_gameweek}.csv\",\n",
    "                    mime=\"text/csv\"\n",
    "                )\n",
    "        \n",
    "        with col2:\n",
    "            if st.button(\"📋 Copy Team to Clipboard\"):\n",
    "                team_text = f\"FPL Team for GW{target_gameweek}\\n\"\n",
    "                team_text += f\"Formation: {formation}\\n\"\n",
    "                team_text += f\"Budget: £{squad_df['value'].sum():.1f}m\\n\\n\"\n",
    "                \n",
    "                starting_xi = squad_df[squad_df['in_starting_xi']]\n",
    "                team_text += \"Starting XI:\\n\"\n",
    "                for pos in ['GK', 'DEF', 'MID', 'FWD']:\n",
    "                    pos_players = starting_xi[starting_xi['position'] == pos]\n",
    "                    if not pos_players.empty:\n",
    "                        team_text += f\"{pos}: \"\n",
    "                        team_text += \", \".join([f\"{p['name']} ({p['team']})\" for _, p in pos_players.iterrows()])\n",
    "                        team_text += \"\\n\"\n",
    "                \n",
    "                st.text_area(\"Team Summary\", team_text, height=200)\n",
    "    \n",
    "    else:\n",
    "        st.info(\"👈 Configure your team settings in the sidebar and click 'Generate Optimal Team' to start!\")\n",
    "        \n",
    "        # Show sample formation\n",
    "        st.subheader(\"🏟️ Sample Formation\")\n",
    "        sample_fig = go.Figure()\n",
    "        sample_fig.add_shape(\n",
    "            type=\"rect\",\n",
    "            x0=0, y0=0, x1=1, y1=1,\n",
    "            fillcolor=\"rgba(0, 255, 135, 0.1)\",\n",
    "            line=dict(color=\"rgba(255, 255, 255, 0.3)\", width=2)\n",
    "        )\n",
    "        sample_fig.update_layout(\n",
    "            xaxis=dict(showgrid=False, zeroline=False, showticklabels=False, range=[0, 1]),\n",
    "            yaxis=dict(showgrid=False, zeroline=False, showticklabels=False, range=[0, 1]),\n",
    "            plot_bgcolor='rgba(0,0,0,0)',\n",
    "            paper_bgcolor='rgba(0,0,0,0)',\n",
    "            height=400,\n",
    "            margin=dict(l=0, r=0, t=0, b=0)\n",
    "        )\n",
    "        st.plotly_chart(sample_fig, use_container_width=True)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
